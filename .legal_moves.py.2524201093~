import numpy as np
# from board import *
import pprint

# origin at top left

import math
import random
from board import *
import time

M = 9
#p1 = [[0 for i in range(2)] for j in range(9)]
p1 = []
p2 = []
board = [[0 for i in range(M)] for j in range(M)]
count = 0
for i in range(4):
  for j in range(4 - i):
    board[i][j] = 1
    #print(count)
    #print(p1[count])
    p1.append([i, j])
    count = count + 1

# Store origin of player 1's pieces as the last element of p1
p1.append([0, 0])

count = 0
for i in range(5, 9):
  for j in range(13 - i, 9):
    board[i][j] = 2
    p2.append([i, j])
    count += 1
#print(board)
#print(p1)

# Store origin of player 2's pieces as the last element of p2
p2.append([8, 8])

#print(p2)  # TODO: Update p1 & p2 after move is made
# for i in range(len(board)):
#   for j in range(len(board[0])):
#     print(board[i][j], end=' ')
#   print("")


def board_print():
  for i in range(9):
    for j in range(9):
      print(board[i][j], end=' ')
    print("")


'''
def flip_board():
    temp = p1.deepcopy()
    p1 = p2.deepcopy()
    p2 = temp.deepcopy()
    for piece in p1:
        board[piece[1]][piece[0]] = 2
    for piece in p2:
        board[piece[1]][piece[0]] = 1
'''


def make_move(x1, y1, x2, y2, player, board):  #player is either 1 or 2
  board[y1][x1] = 0
  board[y2][x2] = player
  if player == 1:
    try:
      ind = p1.index([y1, x1])
    except ValueError:  #check if this error is right for a dictionary
      return False
    # print('IND', ind)
    p1[ind] = [y2, x2]
  elif player == 2:
    try:
      ind = p2.index([y1, x1])
    except ValueError:
      return False
    p2[ind] = [y2, x2]
  #board_print()


#fix it so that it's a try catch and uses index instead of find


def curr_validity_check(x1, y1):
  #print(board[y1][x1])
  if board[y1][x1] > 0:
    return True
  return False


#Check if right player
def check_human_is_plyr_2(x1, y1):
  if board[y1][x1] == 2:
    return True
  return False


#Check the validity of a given move
def validity_check(board, x1, y1, x2, y2):
  if x1 < 0 or x1 > 9 or x2 < 0 or x2 > 9 or y1 < 0 or y1 > 9 or y2 < 0 or y2 > 9:
    return False

  elif board[y2][x2] != 0 or board[y1][x1] == 0:
    return False

  elif abs(y1 - y2) == 2 and x1 == x2:
    return board[int((y1 + y2) / 2)][x1] != 0

  elif abs(x1 - x2) == 2 and y1 == y2:
    return board[y1][int((x1 + x2) / 2)] != 0

  elif abs(x1 - x2) == 1 and y1 == y2:
    return True

  elif abs(y1 - y2) == 1 and x1 == x2:
    return True

  else:
    return False


def reset_board(board):
  for i in range(9):
    for j in range(9):
      if (board[i][j] == 3):
        board[i][j] = 0


def valid_chain(x1, y1, board):
  endings = []
  x_inc = [0, 0, -2, 2]
  y_inc = [-2, 2, 0, 0]
  for i in range(0, 4):
    x2 = x1 + x_inc[i]
    y2 = y1 + y_inc[i]
    #print([y2, x2])
    try:
      if board[y2][x2] == 3:
        continue
    except IndexError:
      continue

    if validity_check(board, x1, y1, x2, y2):
      board[y2][x2] = 3
      endings.append([y2, x2])
      endings += valid_chain(x2, y2, board)

  return endings


def valid_moves(pieces, board):  # subject to change if we want to combine the 1-block move and 2-block move in a single function
  valid = dict()
  for piece in pieces[:-1]:
    valid[tuple(piece)] = []  #NEED TO KEEP THIS FOR RANDOM_TURN DICTIONARY MERGE
    # Rolls
    for i in range(0, 4):
      x_inc = [0, 0, -1, 1]
      y_inc = [-1, 1, 0, 0]
      new_loc = [piece[0] + y_inc[i], piece[1] + x_inc[i]]
      try:
        board[new_loc[0]][new_loc[1]]
      except IndexError:
        continue
      if new_loc != [] and validity_check(board, piece[0], piece[1], new_loc[0], new_loc[1]):
        valid[tuple(piece)].append(new_loc)
   

    # Jumps
    ls = valid_chain(piece[0], piece[1], board)
    valid[tuple(piece)] += ls
    # Add list of rolls to valid[tuple(piece)]
    # Add output from call to valid_chain to valid[tuple(piece)]
    #print_board(board)
    reset_board(board)
    #print_board(board)
    #time.sleep(3)
  return valid


#sample output: {(0, 0): [], (0, 1): [], (0, 2): [[2, 2], [0, 4]], (0, 3): [], (1, 0): [], (1, 1): [[3, 1], [1, 3]], (1, 2): [], (2, 0): [[4, 0], [2, 2]], (2, 1): [], (3, 0): []}


# FIX THIS PLS
def random_turn(board, player):  # returns a random legal move
  #MERGE DICTIONARIES
  if player == 1:
    pieces = p1
  else:
    pieces = p2
  moves = valid_moves(pieces, board) #prints
  moves_list = list(moves)
  new_list = []
  for key in moves_list:
    if moves[key] != []:
      new_list.append((key, moves[key]))

  rand_piece = random.choice(list(new_list))
  poss_moves = rand_piece[1]
  rand_move_ind = random.randint(0, len(poss_moves) - 1)

  y1 = rand_piece[0][0]
  x1 = rand_piece[0][1]
  y2 = poss_moves[rand_move_ind][0]
  x2 = poss_moves[rand_move_ind][1]

  
  return y1, x1, y2, x2


def check_win(board):  #pieces is p1 or p2
  for i in range(5, 9):
    for j in range(8-i+5, 9):
      if board[i][j] != 1:
        return False

  return True

'''def check_win(board):
  return False'''
'''
def calc_board1(pieces): #calculated from p1's point of view
    sum = 0
    for piece in pieces[:-1]:
        sum += piece[0]
        sum += piece[1]
    return sum

'''

def calc_board2(pieces): #calculated from p1's point of view
    sum = 0
    for piece in pieces[:-1]:
        sum += (8-piece[0])*(8-piece[0])
        sum += (8-piece[1])*(8-piece[1])
    return 64-sum

    


#since we have the board now, if we really need to make check_win faster, we can. Good as is for now

#print(valid_moves(p1, 1))
# print(valid_moves(p1, 2))
# print_board(board)
# random_turn(board, 1)
# #make_move(3, 0, 3, 1, 1)
# print_board(board)

#fix that some pieces disappear after a move